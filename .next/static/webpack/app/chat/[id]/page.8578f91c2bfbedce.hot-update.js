"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/chat/[id]/page",{

/***/ "(app-pages-browser)/./hooks/useConversations.tsx":
/*!************************************!*\
  !*** ./hooks/useConversations.tsx ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useConversations: function() { return /* binding */ useConversations; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-experimental/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _useAuth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useAuth */ \"(app-pages-browser)/./hooks/useAuth.tsx\");\n/* __next_internal_client_entry_do_not_use__ useConversations auto */ var _s = $RefreshSig$();\n\n\nfunction useConversations() {\n    _s();\n    const { user } = (0,_useAuth__WEBPACK_IMPORTED_MODULE_1__.useAuth)();\n    const [conversations, setConversations] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const fetchConversations = async ()=>{\n        if (!user) {\n            setConversations([]);\n            setLoading(false);\n            return;\n        }\n        try {\n            setLoading(true);\n            const response = await fetch(\"/api/conversations\");\n            if (!response.ok) {\n                const errorData = await response.text();\n                console.error(\"API Error Response:\", response.status, errorData);\n                throw new Error(\"Failed to fetch conversations: \".concat(response.status, \" \").concat(response.statusText));\n            }\n            const data = await response.json();\n            setConversations(data);\n            setError(null);\n        } catch (err) {\n            console.error(\"Error fetching conversations:\", err);\n            setError(\"Failed to load conversations: \".concat(err instanceof Error ? err.message : String(err)));\n        } finally{\n            setLoading(false);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        fetchConversations();\n    }, [\n        user\n    ]);\n    const createConversation = async (name, type, participants, initialMessage)=>{\n        try {\n            const response = await fetch(\"/api/conversations\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    name,\n                    type,\n                    participants,\n                    initialMessage\n                })\n            });\n            if (!response.ok) {\n                const errorData = await response.text();\n                console.error(\"API Error Response:\", response.status, errorData);\n                throw new Error(\"Failed to create conversation: \".concat(response.status, \" \").concat(response.statusText));\n            }\n            const newConversation = await response.json();\n            setConversations((prev)=>[\n                    newConversation,\n                    ...prev\n                ]);\n            return newConversation;\n        } catch (err) {\n            console.error(\"Error creating conversation:\", err);\n            throw err;\n        }\n    };\n    const sendMessage = async (conversationId, content)=>{\n        try {\n            const response = await fetch(\"/api/conversations/\".concat(conversationId), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    content\n                })\n            });\n            if (!response.ok) {\n                const errorData = await response.text();\n                console.error(\"API Error Response:\", response.status, errorData);\n                throw new Error(\"Failed to send message: \".concat(response.status, \" \").concat(response.statusText));\n            }\n            const newMessage = await response.json();\n            // Update conversations with new message\n            setConversations((prev)=>prev.map((conv)=>{\n                    if (conv._id === conversationId) {\n                        return {\n                            ...conv,\n                            messages: [\n                                ...conv.messages,\n                                newMessage\n                            ],\n                            lastMessage: content,\n                            lastMessageTime: new Date()\n                        };\n                    }\n                    return conv;\n                }));\n            return newMessage;\n        } catch (err) {\n            console.error(\"Error sending message:\", err);\n            throw err;\n        }\n    };\n    const getConversation = async (conversationId)=>{\n        if (!conversationId) {\n            console.error(\"Invalid conversation ID:\", conversationId);\n            throw new Error(\"Invalid conversation ID\");\n        }\n        try {\n            console.log(\"Fetching conversation with ID: \".concat(conversationId));\n            const response = await fetch(\"/api/conversations/\".concat(conversationId));\n            if (!response.ok) {\n                const errorData = await response.text();\n                console.error(\"API Error Response:\", response.status, errorData);\n                throw new Error(\"Failed to fetch conversation: \".concat(response.status, \" \").concat(response.statusText));\n            }\n            const conversation = await response.json();\n            console.log(\"Conversation data received:\", conversation);\n            // Update the conversation in the state\n            setConversations((prev)=>prev.map((conv)=>conv._id === conversationId ? conversation : conv));\n            return conversation;\n        } catch (err) {\n            console.error(\"Error fetching conversation:\", err);\n            setError(\"Failed to fetch conversation: \".concat(err instanceof Error ? err.message : String(err)));\n            throw err;\n        }\n    };\n    // New function to handle error recovery\n    const clearError = ()=>{\n        setError(null);\n    };\n    return {\n        conversations,\n        loading,\n        error,\n        clearError,\n        fetchConversations,\n        createConversation,\n        sendMessage,\n        getConversation\n    };\n}\n_s(useConversations, \"uLA581MRkQ4qs9evMxBXr68ka/8=\", false, function() {\n    return [\n        _useAuth__WEBPACK_IMPORTED_MODULE_1__.useAuth\n    ];\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useConversations.tsx\n"));

/***/ })

});